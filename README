1. Introduction:

    xSocketd is a series of server-side socket functions whit C language.
    x reference choice TCP/UDP(developing)/OTHERS(developing)

    For TCP/IP protocal:
        enum xway{NONE, PPC, TPC, SELECT_TPC, POLL_TPC, EPOLL_TPC};
        NONE-> single server
        PPC -> process per connection or multi process
        TPC -> thread per connection or multi thread
        SELECT_TPC -> select with multi thread 
        POLL_TPC -> poll with multi thread
        EPOLL_TPC -> epoll with multi thread

2. Usage 

    A. Init 

        struct param_s
        xsocketd_init(int type, in_port_t port, const char *ipaddr, int backlog,  enum xway way, nfds_t npfd, bool daemon);
    
    B. Start

        void
        xsocketd_start(const struct param_s *param, vpfun msg_handler);

    C. msg_handler

        void
        msg_handler(int cfd, struct sockaddr_in *caddr)
        {/*Your Code*/}
    
3. Note

    xSocketd is flexible, it's not handle client's performances, include socket options(for client fd), recive, send etc.       
    it's all depends on your decision and to realize these functions in msg_handler()

4. Choice

    For TCP/IP:
    There are five ways to start xSocketd that define in xway:
        enum xway{MULTI_PROCESS, MULTI_THREAD, SELECT, POLL, EPOLL};

    Some suggestions:
   ------------------------------------
   | clients | access time |  choice  |
   ------------------------------------
   | less    |   short     |   PPC    |
   ------------------------------------
   | less    |   long      |   PPC    |
   ------------------------------------
   | midum   |   short     |   TPC    |
   ------------------------------------
   | midum   |   long      |  SELECT  |
   ------------------------------------
   | large   |   short     |  POLL    |
   ------------------------------------
   | large   |   long      |  EPOLL   |
   ------------------------------------

    clients:
        The amount of clients depend on the actual situation,so 'less', 'midum', 'large' are opposite.

    access time : 
        It is difficult to determine when a client will connection start whit the server have a message interchange.

    choice:
        If it's possible, to try every choice 
    
5. Demo 

    //main.c

    #include "xsocketd.h"

    #define PORT 9095
    #define ADDR "192.168.14.144" 

    void msg_handler(int cfd, struct sockaddr_in *caddr)
    {
        char buff[1023];
        recv(cfd, buff, sizeof(buff), 0);
        send(cfd, "back", 5, 0);
    }

    int main(void)
    {
        struct param_s param = xsocketd_init(SOCK_STREAM, PORT, ADDR, 50, EPOLL_TPC, 1000, false);
        xsocketd_start(&param, msg_handler);

        /*SHOULD NOT BE ANY CODES BELOW!*/

        return 0;
    }

    //command line
    #gcc main.c xsocketd.c -lpthead
